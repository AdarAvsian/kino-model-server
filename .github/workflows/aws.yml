name: Deploy to Amazon ECS

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: kino-fitness-images
  ECS_SERVICE: 3dModelAPIService
  ECS_CLUSTER: KinoFitnessCluster
  ECS_TASK_DEFINITION: .aws/task-definition.json 
  CONTAINER_NAME: KinoFitnessContainer
  ECR_REGISTRY: public.ecr.aws/v1i9d3i6

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Pull LFS files
      run: git lfs pull

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Build, tag, and push image to Amazon ECR Public
      id: build-image
      env:
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Register new ECS task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }}
    
    - name: Update ECS service with new task definition
      run: |
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.CONTAINER_NAME }} --query 'taskDefinition.taskDefinitionArn' --output text)
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition $TASK_DEFINITION --force-new-deployment
    
    - name: Wait for service to stabilize
      run: |
        aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}